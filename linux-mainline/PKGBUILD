pkgname=linux-mainline
pkgver=4.18.rc7
pkgrel=2

pkgdesc='linux kernel and modules'
url='https://www.kernel.org'
arch=('x86_64')
license=('GPL2')

options=('!strip')

backup=('etc/mkinitcpio.d/linux-mainline.preset')

install='linux-mainline.install'

depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio')
makedepends=('xmlto' 'inetutils' 'bc' 'libelf' 'git')
optdepends=('crda: to set the correct wireless channels of your country')

provides=('linux-api-headers')
conflicts=('linux-api-headers')

source=('git+https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git'
        'https://git.archlinux.org/svntogit/packages.git/plain/linux/trunk/config'
        '60-linux-mainline.hook.in'
        '90-linux-mainline.hook'
        'linux-mainline.preset'
        'install-headers')

sha256sums=('SKIP'
            'aa7b6756f193f3b3a3fc4947e7a77b09e249df2e345e6495292055d757ba8be6'
            '4eb6dfd9f905ca49403b41f2db00f2c55a72613663c9d225d58b853fddc0f8f4'
            '40ce40c386fd7f0346b2bd15c827d535ac9729c9c33b94e25a30cf097accb0f3'
            '01f289d71128915cde0d734b863ffeb53613e27516e4121a99afe5b712936725'
            '0af2ca9d512d6874b4755bdb25b6a11abf5017ab03e3d256755cdf622f2ac127')

pkgver() {
    cd linux
    git tag --sort=v:refname | sed -n '$ {s/v//; s/-/./;p}'
}

prepare() {
    cd linux
    # Bypass makepkg by manually checking out the required tag as this allows
    # me to continue using the pkgver function which avoids the need to
    # maintain a version and tag.
    git checkout --no-track -fB build "$(git tag --sort=v:refname | tail -n1)"

    # Before doing anything else, save our current clean checkout so that
    # subsequent changes to files such as .config and depmod.sh won't mark the
    # respository as dirty and result in a '+' being added to the localversion.
    ./scripts/setlocalversion --save-scmversion

    make olddefconfig

    # Neutralise scripts/depmod.sh as we need to run the tool after faffing
    # about with the extramodules directories instead of during the call to
    # make module_install.
    # NOTE: I could use make DEPMOD=/something/that/doesnt/exist module_install
    #       but I'd rather not take the chance, no matter how slight.
    printf 'true\n' > scripts/depmod.sh
}

build() {
    cd linux
    make LOCALVERSION=-mainline bzImage modules headers_check
}

package() {
    cd linux
    _kernel=$(make kernelversion)

    make INSTALL_MOD_PATH="$pkgdir"/usr modules_install
    make INSTALL_HDR_PATH="$pkgdir"/usr headers_install

    install -Dm0644 arch/x86/boot/bzImage "$pkgdir"/boot/vmlinuz-linux-mainline

    # Provide a "weak-modules" directory for modules that may not need to be
    # rebuilt for minor kernel version changes such as from 4.15.0 to 4.15.1
    ln -s ../extramodules-"${_kernel%.*}"-mainline "$pkgdir"/usr/lib/modules/"$_kernel"-mainline/extramodules
    printf '%s\n' "$_kernel"-mainline > version
    install -Dm0644 version "$pkgdir"/usr/lib/modules/extramodules-"${_kernel%.*}"-mainline/version

    # These headers are provided by libdrm on Arch Linux
    rm -rf "$pkgdir"/usr/include/drm

    # Clean up unecessary files generated during headers_install
    find "$pkgdir"/usr/include \( -name .install -o -name ..install.cmd \) -delete

    # Remove the 'build' and 'source' symlinks which just point back to the
    # build directory.
    rm -f "$pkgdir"/usr/lib/modules/"$_kernel"-mainline/build
    rm -f "$pkgdir"/usr/lib/modules/"$_kernel"-mainline/source

    # Manually run depmode now that the dust has settled, this also allows us
    # to provide the correct value for -b which avoids needing to modify the
    # depmod.sh script.
    depmod -b "$pkgdir"/usr -F System.map "$_kernel"-mainline

    # Provide an unstripped vmlinux as it may be useful for debugging and other
    # reporting, e.g. `gdb vmlinux /proc/kcore'
    install -Dm0755 vmlinux "$pkgdir"/usr/lib/modules/"$_kernel"-mainline/build/vmlinux

    # Documentation (this should probably be in /usr/share/doc).
    cp -a --no-preserve=ownership Documentation "$pkgdir"/usr/lib/modules/"$_kernel"-mainline/build

    # Provide headers and tools for third-party modules.  There is no standard
    # make target for this.
    "$srcdir"/install-headers "$pkgdir"/usr/lib/modules/"$_kernel"-mainline/build

    # Provide mkinitcpio presets and pacman hooks for rebuilding the initramfs.
    install -Dm0644 "$srcdir"/linux-mainline.preset "$pkgdir"/etc/mkinitcpio.d/linux-mainline.preset
    install -Dm0644 "$srcdir"/90-linux-mainline.hook "$pkgdir"/usr/share/libalpm/hooks/90-linux-mainline.hook

    sed "s/VERSION/$_kernel/" "$srcdir"/60-linux-mainline.hook.in > "$srcdir"/60-linux-mainline.hook
    install -Dm0644 "$srcdir"/60-linux-mainline.hook "$pkgdir"/usr/share/libalpm/hooks/60-linux-mainline.hook
}
