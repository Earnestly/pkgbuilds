pkgname=linux-mainline
pkgver=5.2.0.rc7
pkgrel=2

pkgdesc='linux kernel and modules'
url='https://www.kernel.org'
arch=('x86_64')
license=('GPL')

options=('!strip')

backup=("etc/mkinitcpio.d/$pkgname.preset")

depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio')
makedepends=('xmlto' 'inetutils' 'bc' 'libelf' 'git')
optdepends=('crda: to set the correct wireless channels of your country')

source=('git+https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git'
        'https://git.archlinux.org/svntogit/packages.git/plain/linux/trunk/config'
        'generate-sundry'
        'install-headers')

# Linus Torvalds
# Greg Kroah-Hartman
validpgpkeys=('ABAF11C65A2970B130ABE3C479BE3E4300411886'
              '647F28654894E3BD457199BE38DBBDC86092693E')

sha256sums=('SKIP'
            '013defd92c7530724105f323a22ae484cfc4a9053bbdc8eb2260134d873d7d86'
            '0fc99a5c187eb8dae2acc9d8a0f44e833515f926fd5c713119f2b523e1f50768'
            '198ebb10a58a0ebf19e2824089742c7996d3b46d5f2615bde9a1e2d9b9a8a2ac')

prepare() {
    cd linux
    _tag="$(git tag --sort=v:refname | tail -n1)"

    # Override the original source array so that I can make use of makepkg's
    # internal signature verification routines.  The main diagnostic reporting
    # function (check_pgpsigs) depends on the source array content rather than
    # allowing me to explicitly passing in the necessary netfiles.
    source=("git+https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git#tag=$_tag?signed")
    check_pgpsigs all

    # Bypass makepkg by manually checking out the required tag so that I can
    # continue to use to pkgver function without the need to maintain the
    # versions manually.
    git checkout --no-track -fB build "$_tag"

    # Before doing anything else, save our current clean checkout so that
    # subsequent changes to files such as .config won't mark the respository
    # as dirty and result in a '+' being added to the localversion.
    ./scripts/setlocalversion --save-scmversion

    make olddefconfig
}

pkgver() {
    cd linux
    make kernelversion | sed 's/-/./'
}


build() {
    cd linux
    make LOCALVERSION="${pkgname#linux}" bzImage modules
}

package() {
    cd linux
    _version=$(make kernelversion)
    _variant=${pkgname#linux}
    _kernel=$_version$_variant

    # Kernel image and modules.
    install -Dm0644 arch/x86/boot/bzImage "$pkgdir"/boot/vmlinuz-"$pkgname"

    # For hibernation systemd checks to ensure the running kernel matches an
    # available kernel image on disk.  It assumes the /boot/vmlinuz- name
    # contains the version, instead of checking the version within the vmlinuz
    # file itself.  It also looks in /lib/modules which we can use as the
    # path contains the version.  As such we install the vmlinuz image there as
    # well.  See https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7
    install -Dm0644 arch/x86/boot/bzImage "$pkgdir"/usr/lib/modules/"$_kernel"/vmlinuz

    make INSTALL_MOD_PATH="$pkgdir"/usr modules_install

    # Remove the 'build' and 'source' symlinks which just point back to the
    # build directory.
    rm -f "$pkgdir"/usr/lib/modules/"$_kernel"/build
    rm -f "$pkgdir"/usr/lib/modules/"$_kernel"/source

    ln -s ../extramodules"$_variant" "$pkgdir"/usr/lib/modules/"$_kernel"/extramodules
    printf '%s\n' "$_kernel" | install -Dm0644 /dev/fd/0 "$pkgdir"/usr/lib/modules/extramodules"$_variant"/version

    # Provide an unstripped vmlinux as it may be useful for debugging and other
    # reporting, e.g. `gdb vmlinux /proc/kcore'.
    install -Dm0755 vmlinux "$pkgdir"/usr/lib/modules/"$_kernel"/build/vmlinux

    # Provide mkinitcpio presets and pacman hooks for rebuilding the initramfs
    # and cleaning up.
    "$srcdir"/generate-sundry -t "$srcdir" "$pkgname" "$_kernel"

     install -Dm0644 "$srcdir"/"$pkgname".preset "$pkgdir"/etc/mkinitcpio.d/"$pkgname".preset
     install -Dm0644 "$srcdir"/30-"$pkgname".hook "$pkgdir"/usr/share/libalpm/hooks/30-"$pkgname".hook
     install -Dm0644 "$srcdir"/60-"$pkgname".hook "$pkgdir"/usr/share/libalpm/hooks/60-"$pkgname".hook
     install -Dm0644 "$srcdir"/90-"$pkgname".hook "$pkgdir"/usr/share/libalpm/hooks/90-"$pkgname".hook

    # Provide internal headers and tools for third-party modules.  There is no
    # standard make target for this.
    "$srcdir"/install-headers "$pkgdir"/usr/lib/modules/"$_kernel"/build

    # Documentation.
    install -dm0755 "$pkgdir"/usr/share/doc/"$pkgname"
    cp -a --no-preserve=ownership Documentation "$pkgdir"/usr/share/doc/"$pkgname"

    # These headers are provided by libdrm on Arch Linux.
    rm -rf "$pkgdir"/usr/include/drm

    # Clean up any left over object files.
    find "$pkgdir" -type f -name '*.o' -delete

    # Strip any binaries from the included scripts.
    find "$pkgdir" -type f -executable ! -name vmlinux -exec file -i {} + | while IFS=: read -r file mime; do
        case $mime in
            application/x-archive\;*) strip $STRIP_STATIC "$file" ;;
            application/x-sharedlib\;*) strip $STRIP_SHARED "$file" ;;
            application/x-executable\;*) strip $STRIP_BINARIES "$file" ;;
            application/x-pie-executable\;*) strip $STRIP_SHARED "$file"
        esac
    done
}
