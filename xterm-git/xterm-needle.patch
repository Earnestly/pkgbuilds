diff --git a/button.c b/button.c
index 55d3111..be5be53 100644
--- a/button.c
+++ b/button.c
@@ -2511,6 +2511,85 @@ HandleKeyboardSelectStart(Widget w,
     }
 }
 
+/* ARGSUSED */
+void
+HandleSelectNeedle(Widget w,
+		   XEvent *event GCC_UNUSED,
+		   String *params,
+		   Cardinal *num_params)
+{
+    XtermWidget xw;
+    String needle;
+    size_t len;
+
+    if (!num_params || *num_params < 1) {
+      return;
+    }
+
+    needle = params[0];
+    len = strlen(needle);
+
+    if ((xw = getXtermWidget(w)) != 0) {
+        TScreen *screen = TScreenOf(xw);
+        CELL cell = screen->cursorp;
+        LineData *ld;
+
+#if OPT_FOCUS_EVENT
+        // Fake a focus event to work around some window managers
+        XFocusChangeEvent *focus_event = (XFocusChangeEvent *) event;
+        focus_event->type = FocusIn;
+#endif
+
+        if (!isSameCELL(&screen->startH, &screen->endH)) {
+          TRACE(("SelectNeedle: starting at current highlight\n"));
+          /* If startH and endH differ over both row and column then some range
+           * of cells are selected.
+           *
+           * We stay on the same row to check for multiple matches.
+           */
+          cell.col = screen->startH.col;
+
+          /* If we're at column 0 then assume the highlight is at the beginning
+           * of the row and start again on the row above. */
+          cell.row = cell.col == 0 ? screen->startH.row - 1 : screen->startH.row;
+
+        } else {
+          /* Search the whole screen */
+          cell.row = screen->max_row;
+          cell.col = screen->max_col;
+        }
+
+        for (; cell.row >= 0; cell.row--) {
+          TRACE(("SelectNeedle: row %d\n", cell.row));
+          cell.col = cell.col == 0 ? screen->max_col : cell.col;
+          ld = getLineData(screen, cell.row);
+
+          for (; cell.col > 0; cell.col--) {
+            size_t i;
+            TRACE(("SelectNeedle: cur %d\n", cell.col));
+            for (i = 0; i < len; ++i) {
+              if (ld->charData[cell.col + i] != (unsigned)needle[i]) {
+                break;
+              }
+            }
+
+            /* needle found */
+            if (i == len) {
+#if OPT_FOCUS_EVENT
+              SendFocusButton(xw, focus_event);
+#endif
+              TRACE(("SelectNeedle: found (%d,%d)\n", cell.row, cell.col));
+              screen->selectUnit = Select_WORD;
+              ComputeSelect(xw, &cell, &cell, False);
+              return;
+            }
+          }
+        }
+
+        DisownSelection(xw);
+    }
+}
+
 static void
 TrackDown(XtermWidget xw, XButtonEvent *event)
 {
diff --git a/charproc.c b/charproc.c
index 346a3dc..ea0450e 100644
--- a/charproc.c
+++ b/charproc.c
@@ -269,6 +269,7 @@ static XtActionsRec actionsList[] = {
     { "select-cursor-start",	HandleKeyboardSelectStart },
     { "select-end",		HandleSelectEnd },
     { "select-extend",		HandleSelectExtend },
+    { "select-needle",		HandleSelectNeedle },
     { "select-set",		HandleSelectSet },
     { "select-start",		HandleSelectStart },
     { "send-signal",		HandleSendSignal },
diff --git a/xterm.h b/xterm.h
index 37baa05..757bd1a 100644
--- a/xterm.h
+++ b/xterm.h
@@ -840,6 +840,7 @@ extern void HandleKeyboardSelectStart  PROTO_XT_ACTIONS_ARGS;
 extern void HandleKeyboardStartExtend  PROTO_XT_ACTIONS_ARGS;
 extern void HandleSelectEnd            PROTO_XT_ACTIONS_ARGS;
 extern void HandleSelectExtend         PROTO_XT_ACTIONS_ARGS;
+extern void HandleSelectNeedle         PROTO_XT_ACTIONS_ARGS;
 extern void HandleSelectSet            PROTO_XT_ACTIONS_ARGS;
 extern void HandleSelectStart          PROTO_XT_ACTIONS_ARGS;
 extern void HandleStartExtend          PROTO_XT_ACTIONS_ARGS;
